<template>

  <div id="app">
    Timecop URL:<input v-model="timecop_url" placeholder="http://ip172-18-0-8-bpsji37nctv000dlivr0-3000.direct.labs.play-with-docker.com/back_univariate">
    <p v-if="loaded">El mensaje es: {{ message }}</p>
    <LineTest v-if="loaded" :chart-data="datacollection" />


<select  v-if="loaded" v-model="selected">
    <option v-for="user in info.data" :key="user.name"  v-bind:value="user.name">
                        {{user.name}}
                    </option>
</select>

<span  v-if="loaded">Selected: {{ selected }}</span>



    <table v-if="loaded">
        <tbody>
                    <tr v-for="user in info.data" :key="user.name">
                        <td>{{user.name}}</td>
                        
                    </tr>
                </tbody>
        </table>
    
  </div>
</template>

<script>
import LineTest from './components/LineTest.vue'
//import tForm from './components/Form.vue'
import axios from 'axios'
import Forecast from './assets/TS.json'
export default {
  name: 'App',
  components: {
    LineTest
  },
  data (){
      
    return {
        selected: null,
        response: {},
   
        timecop_url: "https://ip172-18-0-92-bq5he8boudsg00cpgtv0-443.direct.labs.play-with-docker.com/result_list", 
        loaded: false,
        test: null,
        Forecast,
        labels: null,
        values: null,
        title: "hola",
        datos_enviados: '{"data":[27566,27621,25696,21653,21197,21620,25596,28327,29892,28206,28718,44288,29219,29644,32218,29586,22089,28209,33675,25075,32186,27235,29864,49103,29164,29603,32186,24415,19784,24414,27565,27195,34042,37434,35694,48706,31852,30595,34674,27604,22198,26123,28663,27622,40449,29890,28611,52268,33107,31596,38201,36443,23401,25007,30838,28133,40717,30156,31128,53754,35064,35736,39570,38185,24885,31983,31330,31692,41228,35142,36248,58774,36981,36434,41582,33090,27913,30197,32034,33434,41170,34119,35007,54617,39892,41970,41204,46232,31122,31839,40017,37335,46586,40656,43900,61656,41678,41267,46116,44875,32437,32732,41276,40579,49177,42140,44589,69672,46057,49286,51877,41966,33160,34671,44117,45356,51756,46904,48200,78352,53264,51909,58021,56304,39324,43422,49671],"name":"fsdfsdfsd","num_future":5,"desv_metric":2,"train":true,"restart":true}',

        message:"",
        info: null,
        datacollection: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            datasets: []
            }
      
        }
    },
  methods:{
    launch_exec: function () {
        var v = this;
            axios.get(this.timecop_url) //, this.datos_enviados)
                .then((response) => {
                    //check if status is completed, if it is stop polling 
                    //if(response.data.chartName = 'completed') {
                    //     clearInterval(this.pollInterval); //won't be polled anymore 
                    //}
                    alert('lo he enviado')
                    console.log(response.data)
                    v.info = response; 
                }).catch(e => {
            console.log(e);
            });
        },
    obtain_ts_by_name: function (name) {
        var v = this;

        var datos_a_enviar = '{"collection_ts": "ts", "collection_timecop": "timecop", "url": "mongodb://webserver:webserver1@ds261570.mlab.com:61570/ts?retryWrites=false", "database": "ts", "name": "'+name +'" }'
        axios.get(this.timecop_url+'/result_document' , datos_a_enviar)
            .then((response) => {
                //check if status is completed, if it is stop polling 
                //if(response.data.chartName = 'completed') {
                //     clearInterval(this.pollInterval); //won't be polled anymore 
                //}
                alert('lo he enviado')
                console.log(response.data)
                v.info = response; 
            }).catch(e => {
        console.log(e);
        });
    },
    

    pool_exec: function () {
      var v = this;
      setInterval(function () {
        axios.get('https://api.coindesk.com/v1/bpi/currentprice.json')
        .then((response) => {
            //check if status is completed, if it is stop polling 
            //if(response.data.chartName = 'completed') {
            //     clearInterval(this.pollInterval); //won't be polled anymore 
            //}
            v.info = response; 
         })
    }, 2000);
   },

    testFunction: function () {
      var v = this;
      setInterval(function () {
        
            axios.post(this.timecop_url, this.datos_enviados)
                .then((response) => {
                //check if status is completed, if it is stop polling 
                //if(response.data.chartName = 'completed') {
                //     clearInterval(this.pollInterval); //won't be polled anymore 
                //}
                alert(response)
                v.info = response; 
            }).catch(e => {
            console.log(e);
        })
    }, 2000);
   },
    addDebugEngine: function (engine, name) {
        var ts = {}
        console.log(name)
        Array.from(engine.debug).forEach(el => {
                ts[el['step']]=(el['expected value']);
                });
        return ts;
    },

    addFutureEngine: function (engine, name) {
        var ts = {}
                console.log(name)

        Array.from(engine.future).forEach(el => {
                ts[el['step']]=(el['value'] || el['valores']);
                });
        return ts;
    },
    getRandomColor: function () {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
    return color;
    },
   fillData: function  () {
        this.datacollection= {
          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
          datasets: [
            {
              label: this.title,
              //backgroundColor: '#f87979',
              pointBackgroundColor: 'white',
              borderWidth: 1,
              pointBorderColor: '#249EBF',
              data: [40, 40, 20, 50, 90, 10, 20, 40, 50, 70, 90, 100]
            },{
              label: this.title,
              //backgroundColor: '#f87979',
              pointBackgroundColor: 'black',
              borderWidth: 1,
              pointBorderColor: '#249EBF',
              data: [60, 60, 60, 90, 80, 20, 40, 50 ]
            }
          ]
        }

      },
	},
  async mounted () {
    
    this.loaded = false    
    //this.obtain_ts_by_name('prueba')

    const res = Forecast.status 
    const series = {}
    for (const key in res) {
        // no deberia hacer esto :/
        if (key === 'Holtwinters' || key === 'LSTM' || key === 'VAR' || key === 'Autoarima') {
            //tengo que aÃ±adir el debug y el futuro

            var nombre_serie = key + '-debug'
            series[nombre_serie] = this.addDebugEngine(res[key], key)
            nombre_serie = key + '-future'
            series[nombre_serie] = this.addFutureEngine(res[key], key)
 
            }
        }
    var max_length = 0;
    for (const ts in series){
        var miserie=[]
        var temp_serie=series[ts]
        var keys = [];

        for (var k in temp_serie) keys.push(k);
        
        var N = Math.max.apply(null, keys);
        if (N> max_length){
            max_length = N;
        } 
        //var valorx = Array.apply(null, {length: N}).map(Number.call, Number)
        for (var i=1; i < N ; i++){
            if (temp_serie[i] !== undefined ) {
                miserie.push(temp_serie[i]);
            } else {
                miserie.push(null);
            }
            
        }
    
        var test = {
            label: ts,
            fill: false,
            backgroundColor: this.getRandomColor(),
            pointBackgroundColor: 'blue',
            borderWidth: 3,
            pointBorderColor: this.getRandomColor(),
            borderColor: this.getRandomColor(),
            data: miserie
            };
        console.log(test)
        this.datacollection.datasets.push(test)
        this.datacollection.labels = Array.apply(null, {length:max_length}).map(Number.call, Number)
        }

    console.log('Entra en la funcion')

    this.launch_exec()
    console.log('Sale en la funcion')

    this.testFunction()
    this.fillData()
    console.log('FIN')

    this.loaded = true
    }
    
}

</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
